trigger:
- main

pool:
  name: Azure Pipelines
  vmImage: 'windows-2022'
  demands: npm

steps:
- task: Npm@1
  displayName: 'npm install durablefunctionsmonitor.react'
  inputs:
    command: custom
    workingDir: durablefunctionsmonitor.react
    verbose: false
    customCommand: 'install -legacy-peer-deps'

- task: Npm@1
  displayName: 'npm build durablefunctionsmonitor.react'
  inputs:
    command: custom
    workingDir: durablefunctionsmonitor.react
    verbose: false
    customCommand: 'run build'

- task: CopyFiles@2
  displayName: 'copy statics to durablefunctionsmonitor.dotnetbackend/DfmStatics'
  inputs:
    SourceFolder: durablefunctionsmonitor.react/build
    Contents: |
     static/**
     index.html
     favicon.png
     logo.svg
     service-worker.js
     manifest.json
    TargetFolder: durablefunctionsmonitor.dotnetbackend/DfmStatics
    CleanTargetFolder: true

- task: CopyFiles@2
  displayName: 'copy durablefunctionsmonitor.dotnetbackend to ArtifactStagingDirectory'
  inputs:
    SourceFolder: durablefunctionsmonitor.dotnetbackend
    TargetFolder: '$(Build.ArtifactStagingDirectory)/durablefunctionsmonitor.dotnetbackend'
    OverWrite: true

- task: CopyFiles@2
  displayName: 'copy custom-backends to ArtifactStagingDirectory'
  inputs:
    SourceFolder: custom-backends
    TargetFolder: '$(Build.ArtifactStagingDirectory)/custom-backends'
    OverWrite: true

- task: DotNetCoreCLI@2
  displayName: 'dotnet test tests/durablefunctionsmonitor.dotnetbackend.tests'
  inputs:
    command: 'test'
    projects: 'tests/durablefunctionsmonitor.dotnetbackend.tests/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test tests/durablefunctionsmonitor.dotnetisolated.core.tests'
  inputs:
    command: 'test'
    projects: 'tests/durablefunctionsmonitor.dotnetisolated.core.tests/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish durablefunctionsmonitor.dotnetbackend'
  inputs:
    command: publish
    publishWebProjects: false
    projects: durablefunctionsmonitor.dotnetbackend
    arguments: '--output $(Build.ArtifactStagingDirectory)/durablefunctionsmonitor.dotnetbackend/output'
    zipAfterPublish: false
    modifyOutputPath: false

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish durablefunctionsmonitor.dotnetisolated'
  inputs:
    command: publish
    publishWebProjects: false
    projects: durablefunctionsmonitor.dotnetisolated
    arguments: '--output $(Build.ArtifactStagingDirectory)/durablefunctionsmonitor.dotnetisolated/output'
    zipAfterPublish: false
    modifyOutputPath: false

- task: CopyFiles@2
  displayName: 'copy dotnetbackend to durablefunctionsmonitor-vscodeext/backend'
  inputs:
    SourceFolder: '$(Build.ArtifactStagingDirectory)/durablefunctionsmonitor.dotnetbackend/output'
    Contents: |
     **
     !logo.svg
    TargetFolder: 'durablefunctionsmonitor-vscodeext/backend'
    CleanTargetFolder: true

- task: CopyFiles@2
  displayName: 'copy custom-backends to durablefunctionsmonitor-vscodeext/custom-backends'
  inputs:
    SourceFolder: 'custom-backends'
    Contents: |
     **
     !*.md
    TargetFolder: 'durablefunctionsmonitor-vscodeext/custom-backends'
    CleanTargetFolder: true

- task: Npm@1
  displayName: 'npm install durablefunctionsmonitor-vscodeext'
  inputs:
    workingDir: 'durablefunctionsmonitor-vscodeext'
    verbose: false

- task: Npm@1
  displayName: 'npm install -g azure-functions-core-tools@4'
  inputs:
    command: custom
    workingDir: 'durablefunctionsmonitor-vscodeext'
    customCommand: 'install -g azure-functions-core-tools@4'
    verbose: false

- task: Npm@1
  displayName: 'run tests on durablefunctionsmonitor-vscodeext'
  enabled: false
  inputs:
    command: custom
    workingDir: 'durablefunctionsmonitor-vscodeext'
    verbose: false
    customCommand: 'run test'

- task: Npm@1
  displayName: 'package durablefunctionsmonitor-vscodeext to VSIX-file'
  inputs:
    command: custom
    workingDir: 'durablefunctionsmonitor-vscodeext'
    verbose: false
    customCommand: 'run package'

- task: CopyFiles@2
  displayName: 'copy VSIX-file to ArtifactStagingDirectory'
  inputs:
    SourceFolder: 'durablefunctionsmonitor-vscodeext'
    Contents: 'durablefunctionsmonitor*.vsix'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    OverWrite: true

- task: CopyFiles@2
  displayName: 'copy LICENSE to durablefunctionsmonitor.dotnetbackend/output'
  inputs:
    Contents: |
     LICENSE
    TargetFolder: '$(Build.ArtifactStagingDirectory)/durablefunctionsmonitor.dotnetbackend/output'
    OverWrite: true

- task: CopyFiles@2
  displayName: 'copy LICENSE.txt to durablefunctionsmonitor.dotnetisolated/output'
  inputs:
    SourceFolder: 'durablefunctionsmonitor.dotnetisolated'
    Contents: 'LICENSE.txt'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/durablefunctionsmonitor.dotnetisolated/output'
    OverWrite: true

- task: NuGetToolInstaller@1
  displayName: 'Install latest nuget.exe'
  inputs:
    versionSpec:  

- task: NuGetCommand@2
  displayName: 'package dotnetbackend into a Nuget package'
  inputs:
    command: 'pack'
    packagesToPack: '$(Build.ArtifactStagingDirectory)/durablefunctionsmonitor.dotnetbackend/output/nuspec.nuspec'
    packDestination: '$(Build.ArtifactStagingDirectory)'
    versioningScheme: 'off'

- task: NuGetCommand@2
  displayName: 'package dotnetisolated into a Nuget package'
  inputs:
    command: 'pack'
    packagesToPack: '$(Build.ArtifactStagingDirectory)/durablefunctionsmonitor.dotnetisolated/output/nuspec.nuspec'
    packDestination: '$(Build.ArtifactStagingDirectory)'
    versioningScheme: 'off'

- task: az-func-as-a-graph@1
  displayName: 'Generate az-func-as-a-graph diagram of DurableFunctionsMonitor.DotNetBackend'
  inputs:
    projectFolder: '$(System.DefaultWorkingDirectory)/durablefunctionsmonitor.dotnetbackend'
    outputFile: '$(Build.ArtifactStagingDirectory)/DurableFunctionsMonitor-DotNetBackend-Diagram.htm'
    repoUri: '$(Build.Repository.Uri)'
    repoName: '$(Build.Repository.Name)'
    branchName: '$(Build.SourceBranchName)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
